/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: coin.proto */

#ifndef PROTOBUF_C_coin_2eproto__INCLUDED
#define PROTOBUF_C_coin_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Coin__Envelope Coin__Envelope;
typedef struct Coin__RequestTask Coin__RequestTask;
typedef struct Coin__Task Coin__Task;
typedef struct Coin__Solution Coin__Solution;
typedef struct Coin__Verification Coin__Verification;
typedef struct Coin__Heartbeat Coin__Heartbeat;
typedef struct Coin__HeartbeatReply Coin__HeartbeatReply;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  COIN__ENVELOPE__BODY__NOT_SET = 0,
  COIN__ENVELOPE__BODY_REQUEST_TASK = 1,
  COIN__ENVELOPE__BODY_TASK = 2,
  COIN__ENVELOPE__BODY_SOLUTION = 3,
  COIN__ENVELOPE__BODY_VERIFICATION = 4,
  COIN__ENVELOPE__BODY_HEARTBEAT = 5,
  COIN__ENVELOPE__BODY_HEARTBEAT_REPLY = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COIN__ENVELOPE__BODY__CASE)
} Coin__Envelope__BodyCase;

/*
 * Exactly one of these messages will be set.
 */
struct  Coin__Envelope
{
  ProtobufCMessage base;
  Coin__Envelope__BodyCase body_case;
  union {
    Coin__Heartbeat *heartbeat;
    Coin__HeartbeatReply *heartbeat_reply;
    Coin__RequestTask *request_task;
    Coin__Solution *solution;
    Coin__Task *task;
    Coin__Verification *verification;
  };
};
#define COIN__ENVELOPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__envelope__descriptor) \
, COIN__ENVELOPE__BODY__NOT_SET, {0} }


struct  Coin__RequestTask
{
  ProtobufCMessage base;
  char *username;
};
#define COIN__REQUEST_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__request_task__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Coin__Task
{
  ProtobufCMessage base;
  char *block;
  uint32_t difficulty_mask;
  uint64_t sequence_num;
};
#define COIN__TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__task__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


struct  Coin__Solution
{
  ProtobufCMessage base;
  char *username;
  char *block;
  uint32_t difficulty_mask;
  uint64_t nonce;
  uint64_t sequence_num;
};
#define COIN__SOLUTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__solution__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  Coin__Verification
{
  ProtobufCMessage base;
  protobuf_c_boolean ok;
  char *error_description;
};
#define COIN__VERIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__verification__descriptor) \
, 0, (char *)protobuf_c_empty_string }


struct  Coin__Heartbeat
{
  ProtobufCMessage base;
  char *username;
};
#define COIN__HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__heartbeat__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Coin__HeartbeatReply
{
  ProtobufCMessage base;
  uint64_t sequence_num;
};
#define COIN__HEARTBEAT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coin__heartbeat_reply__descriptor) \
, 0 }


/* Coin__Envelope methods */
void   coin__envelope__init
                     (Coin__Envelope         *message);
size_t coin__envelope__get_packed_size
                     (const Coin__Envelope   *message);
size_t coin__envelope__pack
                     (const Coin__Envelope   *message,
                      uint8_t             *out);
size_t coin__envelope__pack_to_buffer
                     (const Coin__Envelope   *message,
                      ProtobufCBuffer     *buffer);
Coin__Envelope *
       coin__envelope__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__envelope__free_unpacked
                     (Coin__Envelope *message,
                      ProtobufCAllocator *allocator);
/* Coin__RequestTask methods */
void   coin__request_task__init
                     (Coin__RequestTask         *message);
size_t coin__request_task__get_packed_size
                     (const Coin__RequestTask   *message);
size_t coin__request_task__pack
                     (const Coin__RequestTask   *message,
                      uint8_t             *out);
size_t coin__request_task__pack_to_buffer
                     (const Coin__RequestTask   *message,
                      ProtobufCBuffer     *buffer);
Coin__RequestTask *
       coin__request_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__request_task__free_unpacked
                     (Coin__RequestTask *message,
                      ProtobufCAllocator *allocator);
/* Coin__Task methods */
void   coin__task__init
                     (Coin__Task         *message);
size_t coin__task__get_packed_size
                     (const Coin__Task   *message);
size_t coin__task__pack
                     (const Coin__Task   *message,
                      uint8_t             *out);
size_t coin__task__pack_to_buffer
                     (const Coin__Task   *message,
                      ProtobufCBuffer     *buffer);
Coin__Task *
       coin__task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__task__free_unpacked
                     (Coin__Task *message,
                      ProtobufCAllocator *allocator);
/* Coin__Solution methods */
void   coin__solution__init
                     (Coin__Solution         *message);
size_t coin__solution__get_packed_size
                     (const Coin__Solution   *message);
size_t coin__solution__pack
                     (const Coin__Solution   *message,
                      uint8_t             *out);
size_t coin__solution__pack_to_buffer
                     (const Coin__Solution   *message,
                      ProtobufCBuffer     *buffer);
Coin__Solution *
       coin__solution__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__solution__free_unpacked
                     (Coin__Solution *message,
                      ProtobufCAllocator *allocator);
/* Coin__Verification methods */
void   coin__verification__init
                     (Coin__Verification         *message);
size_t coin__verification__get_packed_size
                     (const Coin__Verification   *message);
size_t coin__verification__pack
                     (const Coin__Verification   *message,
                      uint8_t             *out);
size_t coin__verification__pack_to_buffer
                     (const Coin__Verification   *message,
                      ProtobufCBuffer     *buffer);
Coin__Verification *
       coin__verification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__verification__free_unpacked
                     (Coin__Verification *message,
                      ProtobufCAllocator *allocator);
/* Coin__Heartbeat methods */
void   coin__heartbeat__init
                     (Coin__Heartbeat         *message);
size_t coin__heartbeat__get_packed_size
                     (const Coin__Heartbeat   *message);
size_t coin__heartbeat__pack
                     (const Coin__Heartbeat   *message,
                      uint8_t             *out);
size_t coin__heartbeat__pack_to_buffer
                     (const Coin__Heartbeat   *message,
                      ProtobufCBuffer     *buffer);
Coin__Heartbeat *
       coin__heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__heartbeat__free_unpacked
                     (Coin__Heartbeat *message,
                      ProtobufCAllocator *allocator);
/* Coin__HeartbeatReply methods */
void   coin__heartbeat_reply__init
                     (Coin__HeartbeatReply         *message);
size_t coin__heartbeat_reply__get_packed_size
                     (const Coin__HeartbeatReply   *message);
size_t coin__heartbeat_reply__pack
                     (const Coin__HeartbeatReply   *message,
                      uint8_t             *out);
size_t coin__heartbeat_reply__pack_to_buffer
                     (const Coin__HeartbeatReply   *message,
                      ProtobufCBuffer     *buffer);
Coin__HeartbeatReply *
       coin__heartbeat_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coin__heartbeat_reply__free_unpacked
                     (Coin__HeartbeatReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Coin__Envelope_Closure)
                 (const Coin__Envelope *message,
                  void *closure_data);
typedef void (*Coin__RequestTask_Closure)
                 (const Coin__RequestTask *message,
                  void *closure_data);
typedef void (*Coin__Task_Closure)
                 (const Coin__Task *message,
                  void *closure_data);
typedef void (*Coin__Solution_Closure)
                 (const Coin__Solution *message,
                  void *closure_data);
typedef void (*Coin__Verification_Closure)
                 (const Coin__Verification *message,
                  void *closure_data);
typedef void (*Coin__Heartbeat_Closure)
                 (const Coin__Heartbeat *message,
                  void *closure_data);
typedef void (*Coin__HeartbeatReply_Closure)
                 (const Coin__HeartbeatReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor coin__envelope__descriptor;
extern const ProtobufCMessageDescriptor coin__request_task__descriptor;
extern const ProtobufCMessageDescriptor coin__task__descriptor;
extern const ProtobufCMessageDescriptor coin__solution__descriptor;
extern const ProtobufCMessageDescriptor coin__verification__descriptor;
extern const ProtobufCMessageDescriptor coin__heartbeat__descriptor;
extern const ProtobufCMessageDescriptor coin__heartbeat_reply__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_coin_2eproto__INCLUDED */
